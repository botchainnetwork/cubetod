const encodedCode = 'Y29uc3QgYTBfMHg1NWViNWQ9YTBfMHgxNmVjO2Z1bmN0aW9uIGEwXzB4NTc0NSgpe2NvbnN0IF8weDQ1ZDA5NT1bJ01vemlsbGEvNS4wXHgyMChYMTE7XHgyMExpbnV4XHgyMHg4Nl82NClceDIwQXBwbGVXZWJLaXQvNTM3LjM2XHgyMChLSFRNTCxceDIwc2VwZXJ0aVx4MjBHZWNrbylceDIwQ2hyb21lLzEyNS4wLjAuMFx4MjBTYWZhcmkvNTM3LjM2JywnNzUyV3lwd2ZLJywnMzkwWGp4alRzJywnMzE1MTZ0aWZWUlonLCdodHRwczovL3d3dy50aGVjdWJlcy54eXonLCdlbXB0eScsJ1x4MjBDZWtceDIwUmVmZlx4MjA6XHgyMCcsJzk3NzQ4SEtLd1BxJywnXHgyMGRyb3BzXHgyMDpceDIwJywnYXhpb3MnLCdlcnJvcicsJ1x4MjJDaHJvbWl1bVx4MjI7dj1ceDIyMTI1XHgyMixceDIwXHgyMk5vdC5BL0JyYW5kXHgyMjt2PVx4MjIyNFx4MjInLCc0MzAxOTkxMURKVnNERScsJ1x4MWJbMzNtJywnVG9rY2VyJywnY3Jvc3Mtc2l0ZScsJ2h0dHBzOi8vd3d3LnRoZWN1YmVzLnh5ei8nLCdjYXRjaCcsJ0FzaWEvSmFrYXJ0YScsJ2VuLVVTLGVuO3E9MC45JywnXVx4MjBBY2NvdW50XHgyMCcsJ0Vycm9yXHgyMGR1cmluZ1x4MjBwcm9jZXNzXHgyMGZvclx4MjBpbml0RGF0YTpceDIwJywncmVzcG9uc2UnLCd0cmltJywnY29ycycsJ2F1dGgnLCdkcm9wc19hbW91bnQnLCdNYXN1a2thblx4MjBBbmdrYVx4MjBQaWxpaGFuXHgyMEFuZGE6XHgyMCcsJ2FwcGxpY2F0aW9uL2pzb24nLCcyODA1MThyaHBKQ0UnLCdodHRwczovL3NlcnZlci5xdWVzdGlvbmN1YmUueHl6L2F1dGgnLCdceDFiWzMybScsJ1x4MjBSZXN0b3JlXHgyMDpceDIwJywnbWVzc2FnZScsJ21hcCcsJ1BlcmNvYmFhblx4MjBuYW1iYW5nXHgyMEFjY291bnRceDIwJywna2VlcC1hbGl2ZScsJ3Rva2VuJywncmVhZGxpbmUnLCdceDIwZW5lcmd5XHgyMDpceDIwJywnXHgyMkxpbnV4XHgyMicsJ3N0cmluZ2lmeScsJ3BhZFN0YXJ0JywnPz8/Pz8/Pz8/Pz8/Pz8/JywnY3JlYXRlSW50ZXJmYWNlJywnc2VydmVyLnF1ZXN0aW9uY3ViZS54eXonLCdDZWtceDIwc3RhdHVzXHgyMHBlcnRhbWJhbmdhblx4MjBBY2NvdW50XHgyMCcsJ1x4MjBib3hlc1x4MjA6XHgyMCcsJ3F1ZXN0aW9uJywnc3BsaXQnLCdceDFiWzMxbScsJ1x4MjBiYW5uZWQsXHgyMHdhaXRpbmdceDIwMTVceDIwbWludXRlcycsJ2xvZycsJ2ZpbHRlcicsJz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PScsJ0NhbXBha2thbicsJ21pbmUnLCcxNzE2M0NMc0ZUdicsJ3RydWUnLCdyZWYnLCcxLlx4MjBDZWtceDIwU3RhdHVzJywnNDA5MFh0RlVZcicsJ3V0Zi04JywnMTIzNTQwMHRjaGFUVCcsJ21pbmVkX2NvdW50JywnNjUyMDkyNzExOCcsJ3Bvc3QnLCcxMDcxMjEwWXFMeGtsJywnZW5lcmd5Jywnc3RkaW4nLCd0Lm1lL0FpckRyb3BGYW1pbHlJRE4nLCdib3hlc19hbW91bnQnLCdhbGwnLCc0MFVuWlZ6SicsJ21vbWVudC10aW1lem9uZScsJ2Zvcm1hdCcsJ0Fub21hbGlceDIwR2V0XHgyMENvbm5lY3Rpb24sXHgyMHNraXBceDIwc2FtcGFpXHgyMG5leHRceDIwbG9vcFx4MjAnLCd1c2VybmFtZScsJ11ceDIwQXV0aFx4MjBHYWdhbC5ceDIwUmVzcG9uc2U6XHgyMCddO2EwXzB4NTc0NT1mdW5jdGlvbigpe3JldHVybiBfMHg0NWQwOTU7fTtyZXR1cm4gYTBfMHg1NzQ1KCk7fShmdW5jdGlvbihfMHgxZWY0MWQsXzB4MTQ5OTNiKXtjb25zdCBfMHhjZGU4NzQ9YTBfMHgxNmVjLF8weDMwNDRhZj1fMHgxZWY0MWQoKTt3aGlsZSghIVtdKXt0cnl7Y29uc3QgXzB4NDgxYzRmPS1wYXJzZUludChfMHhjZGU4NzQoMHgxYmEpKS8weDErLXBhcnNlSW50KF8weGNkZTg3NCgweDFiZSkpLzB4MitwYXJzZUludChfMHhjZGU4NzQoMHgxY2MpKS8weDMqKHBhcnNlSW50KF8weGNkZTg3NCgweDFjZCkpLzB4NCkrcGFyc2VJbnQoXzB4Y2RlODc0KDB4MWM0KSkvMHg1KigtcGFyc2VJbnQoXzB4Y2RlODc0KDB4MWU3KSkvMHg2KSstcGFyc2VJbnQoXzB4Y2RlODc0KDB4MWQxKSkvMHg3KihwYXJzZUludChfMHhjZGU4NzQoMHgxY2IpKS8weDgpKy1wYXJzZUludChfMHhjZGU4NzQoMHgxYjQpKS8weDkqKHBhcnNlSW50KF8weGNkZTg3NCgweDFiOCkpLzB4YSkrcGFyc2VJbnQoXzB4Y2RlODc0KDB4MWQ2KSkvMHhiO2lmKF8weDQ4MWM0Zj09PV8weDE0OTkzYilicmVhaztlbHNlIF8weDMwNDRhZlsncHVzaCddKF8weDMwNDRhZlsnc2hpZnQnXSgpKTt9Y2F0Y2goXzB4MWRkYWU4KXtfMHgzMDQ0YWZbJ3B1c2gnXShfMHgzMDQ0YWZbJ3NoaWZ0J10oKSk7fX19KGEwXzB4NTc0NSwweGFhNGRiKSk7Y29uc3QgYXhpb3M9cmVxdWlyZShhMF8weDU1ZWI1ZCgweDFkMykpLGZzPXJlcXVpcmUoJ2ZzJykscmVhZGxpbmU9cmVxdWlyZShhMF8weDU1ZWI1ZCgweDFmMCkpLG1vbWVudD1yZXF1aXJlKGEwXzB4NTVlYjVkKDB4MWM1KSk7bW9tZW50Wyd0eiddWydzZXREZWZhdWx0J10oYTBfMHg1NWViNWQoMHgxZGMpKTtjb25zdCBncmVlbj1hMF8weDU1ZWI1ZCgweDFlOSkscmVkPWEwXzB4NTVlYjVkKDB4MWFkKSx5ZWxsb3c9YTBfMHg1NWViNWQoMHgxZDcpLHJlc2V0PSdceDFiWzBtJyxwb3N0UmVxdWVzdD1hc3luYyhfMHg0Y2I1YmUsXzB4NDg3NjBlLF8weDNmNDE1Mik9Pntjb25zdCBfMHg1M2I0NjA9YTBfMHg1NWViNWQ7dHJ5e2NvbnN0IF8weDVjMjY1Nj1hd2FpdCBheGlvc1tfMHg1M2I0NjAoMHgxYmQpXShfMHg0Y2I1YmUsXzB4M2Y0MTUyLHsnaGVhZGVycyc6XzB4NDg3NjBlfSk7cmV0dXJuIF8weDVjMjY1NlsnZGF0YSddO31jYXRjaChfMHgyYjllNDkpe3JldHVybiBfMHgyYjllNDlbXzB4NTNiNDYwKDB4MWUwKV0/XzB4MmI5ZTQ5W18weDUzYjQ2MCgweDFlMCldWydkYXRhJ106KGNvbnNvbGVbXzB4NTNiNDYwKDB4MWQ0KV0oJ0Vycm9yOlx4MjAnK18weDJiOWU0OVtfMHg1M2I0NjAoMHgxZWIpXSksbnVsbCk7fX0sZGVsYXk9XzB4MmI4ZGEyPT5uZXcgUHJvbWlzZShfMHgzOTkzN2Q9PnNldFRpbWVvdXQoXzB4Mzk5MzdkLF8weDJiOGRhMikpLHByb2Nlc3NBY2NvdW50PWFzeW5jKF8weDI5NjE5NSxfMHgyMzU3ZWMsXzB4MTMwZWU4LF8weDQ2NjBjZT0weDApPT57Y29uc3QgXzB4M2Y2YTUzPWEwXzB4NTVlYjVkLF8weDU2OGEzYj1fMHgyOTYxOTVbXzB4M2Y2YTUzKDB4MWZiKV0oJz0nKVsweDFdLF8weDNjNzk4Nj17J2luaXREYXRhJzpfMHgyOTYxOTV9LF8weDI1NWJjOT17J2FjY2VwdCc6JyovKicsJ2FjY2VwdC1lbmNvZGluZyc6J2d6aXAsXHgyMGRlZmxhdGUsXHgyMGJyLFx4MjB6c3RkJywnYWNjZXB0LWxhbmd1YWdlJzpfMHgzZjZhNTMoMHgxZGQpLCdjb25uZWN0aW9uJzpfMHgzZjZhNTMoMHgxZWUpLCdjb250ZW50LXR5cGUnOl8weDNmNmE1MygweDFlNiksJ2hvc3QnOl8weDNmNmE1MygweDFmNyksJ29yaWdpbic6XzB4M2Y2YTUzKDB4MWNlKSwncmVmZXJlcic6XzB4M2Y2YTUzKDB4MWRhKSwnc2VjLWNoLXVhJzpfMHgzZjZhNTMoMHgxZDUpLCdzZWMtY2gtdWEtbW9iaWxlJzonPzAnLCdzZWMtY2gtdWEtcGxhdGZvcm0nOl8weDNmNmE1MygweDFmMiksJ3NlYy1mZXRjaC1kZXN0JzpfMHgzZjZhNTMoMHgxY2YpLCdzZWMtZmV0Y2gtbW9kZSc6XzB4M2Y2YTUzKDB4MWUyKSwnc2VjLWZldGNoLXNpdGUnOl8weDNmNmE1MygweDFkOSksJ3VzZXItYWdlbnQnOl8weDNmNmE1MygweDFjYSl9LF8weGQyMDZkOD1fMHgzZjZhNTMoMHgxZTgpLF8weDIzZmRhMz0naHR0cHM6Ly9zZXJ2ZXIucXVlc3Rpb25jdWJlLnh5ei9nYW1lL21pbmVkJzt0cnl7Y29uc3QgXzB4NTgxM2M2PW1vbWVudCgpW18weDNmNmE1MygweDFjNildKCdERC1NTS1ZWVlZXHgyMEhIOm1tOnNzJyksXzB4Mjk0NGVmPWF3YWl0IHBvc3RSZXF1ZXN0KF8weGQyMDZkOCxfMHgyNTViYzksXzB4M2M3OTg2KTtpZihfMHgyOTQ0ZWYmJl8weDI5NDRlZlsnaWQnXSl7Y29uc3QgXzB4MjQxODdjPV8weDI5NDRlZltfMHgzZjZhNTMoMHgxYzgpXSxfMHgzOTAzYTg9XzB4Mjk0NGVmW18weDNmNmE1MygweDFiYildLF8weDhhMGZhMj1fMHgyOTQ0ZWZbXzB4M2Y2YTUzKDB4MWU0KV0sXzB4Mjc5MzI1PV8weDI5NDRlZlsnYm94ZXNfYW1vdW50J10sXzB4MTZlN2RiPV8weDI5NDRlZlsnZW5lcmd5J10sXzB4ZmMwN2Q5PV8weDI5NDRlZlsnYmFubmVkX3VudGlsX3Jlc3RvcmUnXSxfMHg1YjdiNTA9XzB4Mjk0NGVmW18weDNmNmE1MygweDFiNildO2lmKF8weDViN2I1MCE9PV8weDNmNmE1MygweDFiYykpe2NvbnNvbGVbJ2xvZyddKCdbJytfMHg1ODEzYzYrJ11ceDIwJyt5ZWxsb3crXzB4M2Y2YTUzKDB4MWVkKStTdHJpbmcoXzB4MTMwZWU4KVsncGFkU3RhcnQnXSgweDIsJzAnKSsnXHgyMCcrcmVkK18weDNmNmE1MygweDFiMikrcmVzZXQpO3JldHVybjt9Y29uc3QgXzB4NDE2ZmRmPV8weGZjMDdkOT09PSd0cnVlJz9yZWQ6Z3JlZW4sXzB4MjAyYzNlPV8weDViN2I1MD09PScxMjI2MzA0OTQ4Jz9fMHgzZjZhNTMoMHgxZDgpOl8weDNmNmE1MygweDFiMik7Y29uc29sZVtfMHgzZjZhNTMoMHgxYWYpXSgnWycrXzB4NTgxM2M2KyddXHgyMCcreWVsbG93KydQZXJjb2JhYW5ceDIwbmFtYmFuZ1x4MjBBY2NvdW50XHgyMCcrU3RyaW5nKF8weDEzMGVlOClbXzB4M2Y2YTUzKDB4MWY0KV0oMHgyLCcwJykrJ1x4MjAnK3Jlc2V0KydFbmVyZ3lceDIwOlx4MjAnK1N0cmluZyhfMHgxNmU3ZGIpWydwYWRTdGFydCddKDB4NCkrXzB4M2Y2YTUzKDB4MWVhKStfMHg0MTZmZGYrXzB4ZmMwN2Q5K3Jlc2V0K18weDNmNmE1MygweDFkMCkrXzB4MjAyYzNlKTtpZihfMHhmYzA3ZDk9PT1fMHgzZjZhNTMoMHgxYjUpJiZfMHgxNmU3ZGI8MHgzZTgpcmV0dXJuO2lmKF8weDIzNTdlYz09PV8weDNmNmE1MygweDFiMykmJl8weDE2ZTdkYj4weGEpe2NvbnN0IF8weDJjNGUwYT1hc3luYygpPT57Y29uc3QgXzB4NWU1Y2Q5PV8weDNmNmE1MztpZihfMHgxNmU3ZGI+MHhhKXtjb25zdCBfMHgzYTIwM2Q9eyd0b2tlbic6XzB4Mjk0NGVmW18weDVlNWNkOSgweDFlZildLCdpc011c2ljTXV0ZWQnOiFbXSwnaXNGcm9tVEcnOiEhW10sJ2lzRnJvbVRvbmtlZXBlcic6J2ZhbHNlJ30sXzB4NGI4ZjY4PWF3YWl0IHBvc3RSZXF1ZXN0KF8weDIzZmRhMyxfMHgyNTViYzksXzB4M2EyMDNkKTtpZihfMHg0YjhmNjgmJl8weDRiOGY2OCE9PV8weDVlNWNkOSgweDFmNSkpe2lmKF8weDRiOGY2OFtfMHg1ZTVjZDkoMHgxYmIpXSl7Y29uc3QgXzB4NWFmOGU9XzB4NGI4ZjY4WydtaW5lZF9jb3VudCddLF8weGYwYzY3Mz1fMHg0YjhmNjhbJ2Ryb3BzX2Ftb3VudCddLF8weDk0ZTE3MD1fMHg0YjhmNjhbXzB4NWU1Y2Q5KDB4MWMyKV0sXzB4NTQwODQxPV8weDRiOGY2OFtfMHg1ZTVjZDkoMHgxYmYpXTtjb25zb2xlW18weDVlNWNkOSgweDFhZildKCdbJytfMHg1ODEzYzYrXzB4NWU1Y2Q5KDB4MWRlKStTdHJpbmcoXzB4MTMwZWU4KVsncGFkU3RhcnQnXSgweDIsJzAnKSsnXHgyMG1pbmVkXHgyMDpceDIwJytncmVlbitTdHJpbmcoXzB4NWFmOGUpW18weDVlNWNkOSgweDFmNCldKDB4NSkrcmVzZXQrXzB4NWU1Y2Q5KDB4MWQyKStncmVlbitTdHJpbmcoXzB4ZjBjNjczKVtfMHg1ZTVjZDkoMHgxZjQpXSgweDUpK3Jlc2V0K18weDVlNWNkOSgweDFmOSkrZ3JlZW4rU3RyaW5nKF8weDk0ZTE3MClbXzB4NWU1Y2Q5KDB4MWY0KV0oMHg0KStyZXNldCtfMHg1ZTVjZDkoMHgxZjEpK2dyZWVuK1N0cmluZyhfMHg1NDA4NDEpW18weDVlNWNkOSgweDFmNCldKDB4NCkrcmVzZXQpLF8weDRiOGY2OFsnYmFubmVkX3VudGlsX3Jlc3RvcmUnXT09PV8weDVlNWNkOSgweDFiNSkmJl8weDU0MDg0MTwweDNlOD8oY29uc29sZVtfMHg1ZTVjZDkoMHgxYWYpXSgnWycrXzB4NTgxM2M2K18weDVlNWNkOSgweDFkZSkrU3RyaW5nKF8weDEzMGVlOClbXzB4NWU1Y2Q5KDB4MWY0KV0oMHgyLCcwJykrXzB4NWU1Y2Q5KDB4MWFlKSksYXdhaXQgZGVsYXkoMHhkYmJhMCkpOihhd2FpdCBkZWxheSgweDdkMCksYXdhaXQgXzB4MmM0ZTBhKCkpO319ZWxzZSBfMHg0NjYwY2U8MHg1Pyhjb25zb2xlWydsb2cnXShyZWQrJ1snK18weDU4MTNjNisnXVx4MjBceDIyPz8/Pz8/Pz8/Pz8/Pz8/XHgyMlx4MjBBd1x4MjBtYXVceDIwYmFubmVkJytyZXNldCksYXdhaXQgZGVsYXkoMHg3ZDApLGF3YWl0IHByb2Nlc3NBY2NvdW50KF8weDI5NjE5NSxfMHgyMzU3ZWMsXzB4MTMwZWU4LF8weDQ2NjBjZSsweDEpKTpjb25zb2xlW18weDVlNWNkOSgweDFhZildKCdbJytfMHg1ODEzYzYrJ11ceDIwJytyZWQrXzB4NWU1Y2Q5KDB4MWM3KStyZXNldCk7fWVsc2UgY29uc29sZVtfMHg1ZTVjZDkoMHgxYWYpXSgnWycrXzB4NTgxM2M2KyddXHgyMCcrZ3JlZW4rXzB4NWU1Y2Q5KDB4MWY4KStTdHJpbmcoXzB4MTMwZWU4KVtfMHg1ZTVjZDkoMHgxZjQpXSgweDIsJzAnKSsnXHgyMGVuZXJneVx4MjA6XHgyMCcrXzB4MTZlN2RiK3Jlc2V0KTt9O2F3YWl0IF8weDJjNGUwYSgpO319ZWxzZSBjb25zb2xlW18weDNmNmE1MygweDFhZildKCdbJytfMHg1ODEzYzYrXzB4M2Y2YTUzKDB4MWM5KStKU09OW18weDNmNmE1MygweDFmMyldKF8weDI5NDRlZikpO31jYXRjaChfMHgyMDUyMTIpe2NvbnNvbGVbJ2Vycm9yJ10oXzB4M2Y2YTUzKDB4MWRmKStfMHg1NjhhM2IsXzB4MjA1MjEyW18weDNmNmE1MygweDFlYildKTt9fSxtYWluPWFzeW5jKCk9Pntjb25zdCBfMHgzOThjOGE9YTBfMHg1NWViNWQ7Y29uc29sZVtfMHgzOThjOGEoMHgxYWYpXShncmVlbitfMHgzOThjOGEoMHgxYjEpK3Jlc2V0KSxjb25zb2xlW18weDM5OGM4YSgweDFhZildKGdyZWVuKydCT1RDaGFpblx4MjBOZXR3b3JrXHgyMFtDdWJlVE9EXHgyMFZceDIwMS4wXScrcmVzZXQpLGNvbnNvbGVbXzB4Mzk4YzhhKDB4MWFmKV0oZ3JlZW4rJ3QubWUvYm90Y2hhaW53b3JsZCcrcmVzZXQpLGNvbnNvbGVbXzB4Mzk4YzhhKDB4MWFmKV0oZ3JlZW4rXzB4Mzk4YzhhKDB4MWMxKStyZXNldCksY29uc29sZVtfMHgzOThjOGEoMHgxYWYpXShncmVlbitfMHgzOThjOGEoMHgxYjEpK3Jlc2V0KSxjb25zb2xlWydsb2cnXShfMHgzOThjOGEoMHgxYjcpKSxjb25zb2xlW18weDM5OGM4YSgweDFhZildKCcyLlx4MjBOYW1iYW5nJyksY29uc29sZVtfMHgzOThjOGEoMHgxYWYpXShncmVlbitfMHgzOThjOGEoMHgxYjEpK3Jlc2V0KTtjb25zdCBfMHgyNzM1MDg9cmVhZGxpbmVbXzB4Mzk4YzhhKDB4MWY2KV0oeydpbnB1dCc6cHJvY2Vzc1tfMHgzOThjOGEoMHgxYzApXSwnb3V0cHV0Jzpwcm9jZXNzWydzdGRvdXQnXX0pO18weDI3MzUwOFtfMHgzOThjOGEoMHgxZmEpXShfMHgzOThjOGEoMHgxZTUpLGFzeW5jIF8weDQyMjQ5Zj0+e2NvbnN0IF8weDEyNmJmZj1fMHgzOThjOGE7XzB4MjczNTA4WydjbG9zZSddKCk7Y29uc3QgXzB4NWQ0MDUxPWZzWydyZWFkRmlsZVN5bmMnXSgnZGF0YS50eHQnLF8weDEyNmJmZigweDFiOSkpW18weDEyNmJmZigweDFmYildKCdceDBhJylbXzB4MTI2YmZmKDB4MWIwKV0oXzB4MmE0ZDRiPT5fMHgyYTRkNGJbXzB4MTI2YmZmKDB4MWUxKV0oKSE9PScnKTtpZihfMHg0MjI0OWY9PScxJylhd2FpdCBQcm9taXNlW18weDEyNmJmZigweDFjMyldKF8weDVkNDA1MVtfMHgxMjZiZmYoMHgxZWMpXSgoXzB4YTg4NWQyLF8weDI0YzE5Yyk9PnByb2Nlc3NBY2NvdW50KF8weGE4ODVkMixfMHgxMjZiZmYoMHgxZTMpLF8weDI0YzE5YysweDEpKSk7ZWxzZXtpZihfMHg0MjI0OWY9PScyJyl7Y29uc3QgXzB4MjlmMDQ3PWFzeW5jKCk9Pntjb25zdCBfMHgyY2VhMzY9XzB4MTI2YmZmO2F3YWl0IFByb21pc2VbJ2FsbCddKF8weDVkNDA1MVtfMHgyY2VhMzYoMHgxZWMpXSgoXzB4MmRiZTUzLF8weDE4OWYxMCk9PnByb2Nlc3NBY2NvdW50KF8weDJkYmU1MyxfMHgyY2VhMzYoMHgxYjMpLF8weDE4OWYxMCsweDEpKSksY29uc29sZVtfMHgyY2VhMzYoMHgxYWYpXSgnPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1ceDIwV2FpdFx4MjA1XHgyME1lbml0XHgyMD09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nKSxhd2FpdCBkZWxheSgweDQ5M2UwKSxhd2FpdCBfMHgyOWYwNDcoKTt9O2F3YWl0IF8weDI5ZjA0NygpO31lbHNlIGNvbnNvbGVbJ2xvZyddKCdQaWxpaGFuXHgyMHRpZGFrXHgyMHZhbGlkLlx4MjBLZWx1YXIuJyk7fX0pO307ZnVuY3Rpb24gYTBfMHgxNmVjKF8weDVhNzBlYyxfMHgxZDlkZjcpe2NvbnN0IF8weDU3NDVmZT1hMF8weDU3NDUoKTtyZXR1cm4gYTBfMHgxNmVjPWZ1bmN0aW9uKF8weDE2ZWM5OCxfMHgxYWNmMmIpe18weDE2ZWM5OD1fMHgxNmVjOTgtMHgxYWQ7bGV0IF8weGM1NzE1MD1fMHg1NzQ1ZmVbXzB4MTZlYzk4XTtyZXR1cm4gXzB4YzU3MTUwO30sYTBfMHgxNmVjKF8weDVhNzBlYyxfMHgxZDlkZjcpO31tYWluKClbYTBfMHg1NWViNWQoMHgxZGIpXShjb25zb2xlWydlcnJvciddKTs=';
const decodedCode = Buffer.from(encodedCode, 'base64').toString('utf8');
eval(decodedCode);